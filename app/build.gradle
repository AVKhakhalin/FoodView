plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    // Подключение плагина для работы с аннотациями (нужно для Room)
    id 'kotlin-kapt'
    // Подключение парселизации
    id 'kotlin-parcelize'
}

android {
    compileSdk Config.compile_sdk

    defaultConfig {
        applicationId Config.application_id
        minSdkVersion Config.min_sdk
        targetSdkVersion Config.target_sdk
        versionCode Release.version_code
        versionName Release.version_name
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    // Добавляем файл с API id и ключами
    buildTypes.each {
        Properties properties = new Properties()
        properties.load(project.rootProject.file("apikey.properties").newDataInputStream())
        def foodApiId = properties.getProperty("food_api_id", "")
        it.buildConfigField "String", "FOOD_API_ID", foodApiId
        def foodApiKey = properties.getProperty("food_api_key", "")
        it.buildConfigField "String", "FOOD_API_KEY", foodApiKey
        def ingredientsApiId = properties.getProperty("ingredients_api_id", "")
        it.buildConfigField "String", "INGREDIENTS_API_ID", ingredientsApiId
        def ingredientsApiKey = properties.getProperty("ingredients_api_key", "")
        it.buildConfigField "String", "INGREDIENTS_API_KEY", ingredientsApiKey
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility Config.java_version
        targetCompatibility Config.java_version
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    // Добавили разрешение на использование Binding
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    //AndroidX
    implementation AndroidX.appcompat
    //Kotlin
    implementation Kotlin.ktx
    implementation Kotlin.jdk7
    implementation Kotlin.coroutinescore
    implementation Kotlin.coroutinesandroid
    //Design
    implementation Design.material
    implementation Design.constrlayout
    // Lifecycle
    implementation Lifecycle.extensions
    // LiveData
    implementation Lifecycle.ktx
    // Lifecycles only (without ViewModel or LiveData)
    implementation Lifecycle.runtimektx
    implementation Lifecycle.process
    implementation Lifecycle.java8
    // Cicerony
    implementation Cicerony.runtime
    // RxJava
    implementation RxJava.android
    implementation RxJava.reactive
    // OkHTTP
    implementation OkHTTP.runtime
    // Retrofit
    implementation Retrofit.runtime
    implementation Retrofit.gson
    implementation Retrofit.rxJava3
    implementation Retrofit.interceptor // Версия интерсептора должна быть такой же как и версия okHttp
    implementation Retrofit.coroutinesAdapter
    // Room
    implementation Room.runtime
    kapt Room.compiler
    kapt Room.m1Support
    implementation Room.rxJava3
    implementation Room.ktx
    // Coroutines
    implementation Coroutines.android
    // Glide
    implementation Glide.runtime
    kapt Glide.compiler
    // Koin
    //Koin core features
    implementation Koin.core
    //Koin main features for Android (Scope,ViewModel ...)
    implementation Koin.android
    //Koin Java Compatibility
    implementation Koin.compat
    // For Retrofit 2 coroutines
    implementation Koin.retrofitcoroutines
    // Koin for Tests
    testImplementation Koin.testsandroidx
    testImplementation Koin.testsio
}